{"version":3,"sources":["components/Chart.js","components/App.js","index.js"],"names":["Chart","props","data","chartData","xMax","yMax","x","d","month","y","postCount","xScale","scaleBand","range","round","domain","map","padding","yScale","scaleLinear","Math","max","compose","scale","accessor","xPoint","yPoint","width","height","i","barHeight","Group","Bar","bandwidth","fill","AxisLeft","hideTicks","tickLabelProps","value","index","fontSize","textAnchor","AxisBottom","top","FETCH_DATA","gql","App","useQuery","loading","error","message","results","allPosts","forEach","createdAt","convertedDate","Date","Number","year","getFullYear","getMonth","push","filteredResults","filter","post","monthNames","count","item","length","className","client","ApolloClient","uri","cache","InMemoryCache","providerWrap","ReactDOM","render","document","querySelector"],"mappings":"mQAiFeA,I,EAAAA,EAvEf,SAAeC,GACb,IAAMC,EAAOD,EAAME,UAQbC,EALQ,IAE8B,GAAW,GAIjDC,EALS,IACO,GAAY,GAO5BC,EAAI,SAAAC,GAAC,OAAIA,EAAEC,OACXC,EAAI,SAAAF,GAAC,OAAIA,EAAEG,WAGXC,EAASC,YAAU,CACvBC,MAAO,CAAC,EAAGT,GACXU,OAAO,EACPC,OAAQb,EAAKc,IAAIV,GACjBW,QAAS,KAELC,EAASC,YAAY,CACzBN,MAAO,CAACR,EAAM,GACdS,OAAO,EACPC,OAAQ,CAAC,EAAGK,KAAKC,IAAL,MAAAD,KAAI,YAAQlB,EAAKc,IAAIP,QAI7Ba,EAAU,SAACC,EAAOC,GAAR,OAAqB,SAAAtB,GAAI,OAAIqB,EAAMC,EAAStB,MACtDuB,EAASH,EAAQX,EAAQL,GACzBoB,EAASJ,EAAQJ,EAAQT,GAE/B,OACE,qBAAKkB,MA/BO,IA+BOC,OA9BN,IA8Bb,SACG1B,EAAKc,KAAI,SAACT,EAAGsB,GACZ,IAAMC,EAAYzB,EAAOqB,EAAOnB,GAChC,OACE,eAACwB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACE1B,EAAGmB,EAAOlB,GACVE,EAAGJ,EAAOyB,EACVF,OAAQE,EACRH,MAAOhB,EAAOsB,YACdC,KAAK,YAEP,cAACC,EAAA,EAAD,CACEC,WAAW,EACXb,MAAOL,EACPmB,eAAgB,SAACC,EAAOC,GAAR,MAAmB,CACjCC,SAAU,GACVC,WAAY,UAGhB,cAACC,EAAA,EAAD,CACEC,IAAKtC,EACL+B,WAAW,EACXb,MAAOZ,EACP0B,eAAgB,SAACC,EAAOC,GAAR,MAAmB,CACjCC,SAAU,GACVC,WAAY,eAtBlB,cAAmBZ,UC5CvBe,EAAaC,cAAH,kHAiEDC,EAzDH,WAAO,IAAD,EACiBC,mBAASH,GAAlCI,EADQ,EACRA,QAASC,EADD,EACCA,MAAO/C,EADR,EACQA,KAExB,GAAI8C,EAAS,OAAO,2CACpB,GAAIC,EAAO,MAAM,UAAN,OAAiBA,EAAMC,SAGlC,IAAMC,EAAU,GAEhBjD,EAAKkD,SAASC,SAAQ,YAAoB,IAAjBC,EAAgB,EAAhBA,UACnBC,EAAgB,IAAIC,KAAKC,OAAOH,IAChCI,EAAOH,EAAcI,cACrBnD,EAAQ+C,EAAcK,WAE1BT,EAAQU,KAAK,CACXH,KAAMA,EACNlD,MAAOA,OAwBX,IAfA,IAAMsD,EAAkBX,EAAQY,QAAO,SAACC,GACtC,OAAqB,OAAdA,EAAKN,QAMRvD,EAAY,GACZ8D,EAAa,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OACpE,OAAQ,SAAU,YAAa,UAAW,WAAY,YAEhDC,EAAQ,SAACf,EAASb,GACtB,OAAOa,EAAQY,QAAO,SAAAI,GAAI,OAAIA,EAAK3D,QAAU8B,KAAO8B,QAG7CvC,EAAI,EAAGA,GAAK,GAAIA,IACvB1B,EAAU0D,KACR,CACErD,MAAOyD,EAAWpC,GAClBnB,UAAWwD,EAAMJ,EAAiBjC,KAKxC,OACE,sBAAKwC,UAAU,UAAf,UACE,0DACA,cAAC,EAAD,CAAOlE,UAAWA,QC3DlBmE,EAAS,IAAIC,eAAa,CAC9BC,IAAK,qCACLC,MAAO,IAAIC,kBAGPC,EACJ,cAAC,iBAAD,CAAgBL,OAAQA,EAAxB,SACE,cAAC,EAAD,MAIJM,IAASC,OACPF,EACAG,SAASC,cAAc,Y","file":"static/js/main.6fc8cdd0.chunk.js","sourcesContent":["// most of this code is taken directly from a basic vx example\r\n\r\nimport React from 'react';\r\nimport { Group } from '@visx/group';\r\nimport { Bar } from '@visx/shape';\r\nimport { AxisBottom, AxisLeft } from '@vx/axis';\r\nimport { scaleLinear, scaleBand } from '@visx/scale';\r\n\r\n\r\n// Finally we'll embed it all in an SVG\r\nfunction Chart(props) {\r\n  const data = props.chartData;\r\n\r\n  // Define the graph dimensions and margins\r\n  const width = 750;\r\n  const height = 300;\r\n  const margin = { top: 20, bottom: 20, left: 20, right: 20 };\r\n\r\n  // Then we'll create some bounds\r\n  const xMax = width - margin.left - margin.right;\r\n  const yMax = height - margin.top - margin.bottom;\r\n\r\n  // We'll make some helpers to get at the data we want\r\n  const x = d => d.month;\r\n  const y = d => d.postCount;\r\n\r\n  // And then scale the graph by our data\r\n  const xScale = scaleBand({\r\n    range: [0, xMax],\r\n    round: true,\r\n    domain: data.map(x),\r\n    padding: 0.4,\r\n  });\r\n  const yScale = scaleLinear({\r\n    range: [yMax, 0],\r\n    round: true,\r\n    domain: [0, Math.max(...data.map(y))],\r\n  });\r\n\r\n  // Compose together the scale and accessor functions to get point functions\r\n  const compose = (scale, accessor) => data => scale(accessor(data));\r\n  const xPoint = compose(xScale, x);\r\n  const yPoint = compose(yScale, y);\r\n\r\n  return (\r\n    <svg width={width} height={height}>\r\n      {data.map((d, i) => {\r\n        const barHeight = yMax - yPoint(d);\r\n        return (\r\n          <Group key={`bar-${i}`}>\r\n            <Bar\r\n              x={xPoint(d)}\r\n              y={yMax - barHeight}\r\n              height={barHeight}\r\n              width={xScale.bandwidth()}\r\n              fill=\"#3B444B\"\r\n            />\r\n            <AxisLeft\r\n              hideTicks={true}\r\n              scale={yScale}\r\n              tickLabelProps={(value, index) => ({\r\n                fontSize: 11,\r\n                textAnchor: 'end',\r\n              })}\r\n            />\r\n            <AxisBottom\r\n              top={yMax}\r\n              hideTicks={true}\r\n              scale={xScale}\r\n              tickLabelProps={(value, index) => ({\r\n                fontSize: 11,\r\n                textAnchor: 'middle',\r\n              })}\r\n            />\r\n          </Group>\r\n        );\r\n      })}\r\n    </svg>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport { useQuery, gql } from '@apollo/client'\r\n\r\nimport Chart from './Chart';\r\n\r\nconst FETCH_DATA = gql`\r\n  query GetPosts {\r\n      allPosts (count: 100) {\r\n        createdAt\r\n      }\r\n    }\r\n`;\r\n\r\nconst App = () => {\r\n  const { loading, error, data } = useQuery(FETCH_DATA);\r\n\r\n  if (loading) return <p>Loading...</p>\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  // the array `results` will hold the year and month of each post\r\n  const results = [];\r\n\r\n  data.allPosts.forEach(({ createdAt }) => {\r\n    let convertedDate = new Date(Number(createdAt));\r\n    let year = convertedDate.getFullYear();\r\n    let month = convertedDate.getMonth();\r\n\r\n    results.push({\r\n      year: year,\r\n      month: month\r\n    });\r\n  });\r\n\r\n\r\n  // filtering away the posts not made in 2019\r\n  // this might be unnecessary, since all posts from fakerQL *seem* to be made in 2019\r\n  // but better safe than sorry\r\n\r\n  const filteredResults = results.filter((post) => {\r\n    return post.year === 2019;\r\n  });\r\n\r\n  // `chartData` will hold the total post count for each month\r\n  // this will be passed as a prop to the Chart component\r\n\r\n  const chartData = [];\r\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n  \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n  const count = (results, value) => {\r\n    return results.filter(item => item.month === value).length;\r\n  }\r\n\r\n  for (let i = 0; i <= 11; i++) {\r\n    chartData.push(\r\n      {\r\n        month: monthNames[i],\r\n        postCount: count(filteredResults, i)\r\n      }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h2>Monthly postcount - 2019</h2>\r\n      <Chart chartData={chartData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\n\r\nimport App from './components/App';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://fakerql.stephix.uk/graphql',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nconst providerWrap = (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n);\r\n\r\nReactDOM.render(\r\n  providerWrap,\r\n  document.querySelector('#root')\r\n);\r\n"],"sourceRoot":""}